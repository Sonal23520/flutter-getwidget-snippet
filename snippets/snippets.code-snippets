{
  "Elevated Button": {
    "prefix": "gf-bu-elevated",
    "body": ["GFButton(", "  onPressed: (){},", "  text: \"primary\",", "),"],
    "description": "Elevated Button"
  },
  "Elevated Button Disabled": {
    "prefix": "gf-bu-elevated-disabled",
    "body": ["GFButton(", "  onPressed: null,", "  text: \"primary\",", "),"],
    "description": "Elevated Button Disabled"
  },
  "Elevated Button Transparent": {
    "prefix": "gf-bu-elevated-transparent",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  type: GFButtonType.transparent,",
      "),"
    ],
    "description": "Elevated Button Transparent"
  },
  "Elevated Block Button": {
    "prefix": "gf-bu-elevated-block",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  blockButton: true,",
      "),"
    ],
    "description": "Elevated Block Button"
  },
  "Elevated Full Width Button": {
    "prefix": "gf-bu-elevated-full-width",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  fullWidthButton: true,",
      "),"
    ],
    "description": "Elevated Full Width Button"
  },
  "Elevated Outline Button": {
    "prefix": "gf-bu-elevated-outline",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  type: GFButtonType.outline,",
      "),"
    ],
    "description": "Elevated Outline Button"
  },
  "Pills Button": {
    "prefix": "gf-bu-pills",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  shape: GFButtonShape.pills,",
      "),"
    ],
    "description": "Pills Button"
  },
  "Pills Button Disabled": {
    "prefix": "gf-bu-pills-disabled",
    "body": [
      "GFButton(",
      "  onPressed: null,",
      "  text: \"primary\",",
      "  shape: GFButtonShape.pills,",
      "),"
    ],
    "description": "Pills Button Disabled"
  },
  "Pills Block Button": {
    "prefix": "gf-bu-pills-block",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  shape: GFButtonShape.pills,",
      "  blockButton: true,",
      "),"
    ],
    "description": "Pills Block Button"
  },
  "Pills Full Width Button": {
    "prefix": "gf-bu-pills-full-width",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  shape: GFButtonShape.pills,",
      "  fullWidthButton: true,",
      "),"
    ],
    "description": "Pills Full Width Button"
  },
  "Pills Outline Button": {
    "prefix": "gf-bu-pills-outline",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  shape: GFButtonShape.pills,",
      "  type: GFButtonType.outline,",
      "),"
    ],
    "description": "Pills Outline Button"
  },
  "Square Button": {
    "prefix": "gf-bu-square",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  shape: GFButtonShape.square,",
      "),"
    ],
    "description": "Square Button"
  },
  "Square Button Disabled": {
    "prefix": "gf-bu-square-disabled",
    "body": [
      "GFButton(",
      "  onPressed: null,",
      "  text: \"primary\",",
      "  shape: GFButtonShape.square,",
      "),"
    ],
    "description": "Square Button Disabled"
  },
  "Square Block Button": {
    "prefix": "gf-bu-square-block",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  shape: GFButtonShape.square,",
      "  blockButton: true,",
      "),"
    ],
    "description": "Square Block Button"
  },
  "Square Full Width Button": {
    "prefix": "gf-bu-square-full-width",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  shape: GFButtonShape.square,",
      "  fullWidthButton: true,",
      "),"
    ],
    "description": "Square Full Width Button"
  },
  "Square Outline Button": {
    "prefix": "gf-bu-square-outline",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  shape: GFButtonShape.square,",
      "  type: GFButtonType.outline,",
      "),"
    ],
    "description": "Square Outline Button"
  },
  "Icon Button": {
    "prefix": "gf-bu-icon",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  icon: Icon(Icons.share),",
      "),"
    ],
    "description": "Icon Button"
  },
  "Icon Button Disabled": {
    "prefix": "gf-bu-icon-disabled",
    "body": [
      "GFIconButton(",
      "  onPressed: null,",
      "  text: \"primary\",",
      "),"
    ],
    "description": "Icon Button Disabled"
  },
  "Icon Outline Button": {
    "prefix": "gf-bu-icon-outline",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  icon: Icon(Icons.share),",
      "  type: GFButtonType.outline,",
      "),"
    ],
    "description": "Icon Outline Button"
  },
  "Icon Transparent Button": {
    "prefix": "gf-bu-icon-transparent",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  icon: Icon(Icons.share),",
      "  type: GFButtonType.transparent,",
      "),"
    ],
    "description": "Icon Transparent Button"
  },
  "Icon Pills Button": {
    "prefix": "gf-bu-icon-pills",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  icon: Icon(Icons.share),",
      "  shape: GFButtonShape.pills,",
      "),"
    ],
    "description": "Icon Pills Button"
  },
  "Icon Square Button": {
    "prefix": "gf-bu-icon-square",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  icon: Icon(Icons.share),",
      "  shape: GFButtonShape.square,",
      "),"
    ],
    "description": "Icon Square Button"
  },
  "Icon Block Button": {
    "prefix": "gf-bu-icon-block",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  icon: Icon(Icons.share),",
      "  shape: GFButtonShape.solid,",
      "  blockButton: true,",
      "),"
    ],
    "description": "Icon Block Button"
  },
  "Icon Full Width Button": {
    "prefix": "gf-bu-icon-full-width",
    "body": [
      "GFButton(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  icon: Icon(Icons.share),",
      "  shape: GFButtonShape.solid,",
      "  fullWidthButton: true,",
      "),"
    ],
    "description": "Icon Full Width Button"
  },
  "Badge": {
    "prefix": "gf-badge",
    "body": ["GFBadge(", "  onPressed: (){},", "  child: Text(\"12\"),", "),"],
    "description": "Badge"
  },
  "Button Badge": {
    "prefix": "gf-bu-badge",
    "body": [
      "GFButtonBadge(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  icon: GFBadge(",
      "    child: Text(\"12\"),",
      "  ),",
      "),"
    ],
    "description": "Button Badge"
  },
  "Button Badge Disabled": {
    "prefix": "gf-bu-badge-disabled",
    "body": [
      "GFButtonBadge(",
      "  onPressed: null,",
      "  text: \"primary\",",
      "  icon: GFBadge(",
      "    child: Text(\"12\"),",
      "  ),",
      "),"
    ],
    "description": "Button Badge Disabled"
  },
  "Button Badge Outline": {
    "prefix": "gf-bu-badge-outline",
    "body": [
      "GFButtonBadge(",
      "  onPressed: (){},",
      "  text: \"primary\",",
      "  icon: GFBadge(",
      "    child: Text(\"12\"),",
      "  ),",
      "  type: GFType.outline,",
      "),"
    ],
    "description": "Button Badge Outline"
  },
  "Button Badge Icon": {
    "prefix": "gf-bu-badge-icon",
    "body": [
      "GFIconBadge(",
      "  child: GFIconButton(",
      "   onPressed: (){},",
      "   icon: Icon(Icons.ac_unit),",
      "  ),",
      "  counterChild: GFBadge(",
      "    child: Text(\"12\"),",
      "  ),",
      "),"
    ],
    "description": "Button Badge Icon"
  },
  "Circle Avatar": {
    "prefix": "gf-avatar-circle",
    "body": ["GFAvatar(", "  backgroundImage:NetworkImage(AvatarUrl),", ")"],
    "description": "Circle Avatar"
  },
  "Standard Avatar": {
    "prefix": "gf-avatar-standard",
    "body": [
      "GFAvatar(",
      "  backgroundImage:NetworkImage(AvatarUrl),",
      "  shape: GFAvatarShape.standard",
      ")"
    ],
    "description": "Standard Avatar"
  },
  "Square Avatar": {
    "prefix": "gf-avatar-square",
    "body": [
      "GFAvatar(",
      "  backgroundImage:NetworkImage(AvatarUrl),",
      "  shape: GFAvatarShape.square",
      ")"
    ],
    "description": "Square Avatar"
  },
  "Image Asset": {
    "prefix": "gf-image-asset",
    "body": [
      "GFImageOverlay(",
      "  height: 200,",
      "  width: 300,",
      "  image: AssetImage('your asset image')",
      ")"
    ],
    "description": "Image Asset"
  },
  "Image Network": {
    "prefix": "gf-image-network",
    "body": [
      "GFImageOverlay(",
      "  height: 200,",
      "  width: 300,",
      "  image: NetworkImage('your network image')",
      ")"
    ],
    "description": "Image Network"
  },
  "Image Overlay": {
    "prefix": "gf-image-overlay",
    "body": [
      "GFImageOverlay(",
      "  height: 200,",
      "  width: 300,",
      "  child: Center(",
      "    child: Text('Light Overlay', style:TextStyle(color: GFColors.LIGHT)),",
      "  ),",
      "  image: AssetImage('your asset image'),",
      "  colorFilter: new ColorFilter.mode(Colors.black.withOpacity(0.3),",
      "   BlendMode.darken),",
      "),"
    ],
    "description": "Image Overlay"
  },
  "Image Circle": {
    "prefix": "gf-image-circle",
    "body": [
      "GFImageOverlay(",
      "  height: 200,",
      "  width: 200,",
      "  shape: BoxShape.circle,",
      "  image:AssetImage('your asset image'),",
      "  boxFit: BoxFit.cover,",
      ")"
    ],
    "description": "Image Circle"
  },
  "Card": {
    "prefix": "gf-card",
    "body": [
      "GFCard(",
      " boxFit: BoxFit.cover,",
      " image: Image.asset('your asset image'),",
      " title: GFListTile(",
      "   avatar: GFAvatar(",
      "     backgroundImage: AssetImage('your asset image'),",
      "   ),",
      "   title: Text('Card Title'),",
      "   subTitle: Text('Card Sub Title'),",
      "),",
      "content: Text(\"Some quick example text to build on the card\"),",
      "buttonBar: GFButtonBar(",
      " children: <Widget>[",
      "   GFButton(",
      "    onPressed: () {},",
      "    text: 'Buy',",
      "   ),",
      "   GFButton(",
      "    onPressed: () {},",
      "    text: 'Cancel',",
      "   ),",
      " ],",
      " ),",
      "),"
    ],
    "description": "Card"
  },
  "Card With OverlayImage": {
    "prefix": "gf-card-overlay-image",
    "body": [
      "GFCard(",
      "  boxFit: BoxFit.cover,",
      "  titlePosition: GFPosition.start,",
      "  showOverlayImage: true,",
      "  imageOverlay: AssetImage(",
      "    'your asset image',",
      "  ),",
      "  title: GFListTile(",
      "    avatar: GFAvatar(),",
      "    titleText: 'Game Controllers',",
      "    subTitleText: 'PlayStation 4',",
      "  ),",
      "  content: Text(\"Some quick example text to build on the card\"),",
      "  buttonBar: GFButtonBar(",
      "    children: <Widget>[",
      "      GFAvatar(",
      "        backgroundColor: GFColors.PRIMARY,",
      "        child: Icon(",
      "          Icons.share,",
      "          color: Colors.white,",
      "        ),",
      "      ),",
      "    ],",
      "  ),",
      "),"
    ],
    "description": "Card With OverlayImage"
  },
  "Carousel Slider": {
    "prefix": "gf-carousel-slider",
    "body": [
      "final List<String> imageList = [",
      "  \"https://cdn.pixabay.com/photo/2017/12/03/18/04/christmas-balls-2995437_960_720.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2017/12/13/00/23/christmas-3015776_960_720.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2019/12/19/10/55/christmas-market-4705877_960_720.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2019/12/20/00/03/road-4707345_960_720.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2019/12/22/04/18/x-mas-4711785__340.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2016/11/22/07/09/spruce-1848543__340.jpg\"",
      "];",
      "",
      " GFCarousel(",
      "    items: imageList.map(",
      "     (url) {",
      "     return Container(",
      "       margin: EdgeInsets.all(8.0),",
      "       child: ClipRRect(",
      "         borderRadius: BorderRadius.all(Radius.circular(5.0)),",
      "          child: Image.network(",
      "             url,",
      "             fit: BoxFit.cover,",
      "              width: 1000.0",
      "           ),",
      "        ),",
      "      );",
      "      },",
      "     ).toList(),",
      "    onPageChanged: (index) {",
      "      setState(() {",
      "        index;",
      "      });",
      "    },",
      " ),"
    ],
    "description": "Carousel Slider"
  },
  "Carousel With Multiple Items": {
    "prefix": "gf-carousel-items",
    "body": [
      "final List<String> imageList = [",
      "  \"https://cdn.pixabay.com/photo/2017/12/03/18/04/christmas-balls-2995437_960_720.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2017/12/13/00/23/christmas-3015776_960_720.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2019/12/19/10/55/christmas-market-4705877_960_720.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2019/12/20/00/03/road-4707345_960_720.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2019/12/22/04/18/x-mas-4711785__340.jpg\",",
      "  \"https://cdn.pixabay.com/photo/2016/11/22/07/09/spruce-1848543__340.jpg\"",
      "];",
      "",
      "GFItemsCarousel(",
      "  rowCount: 3,",
      "  children: imageList.map(",
      "    (url) {",
      "     return Container(",
      "       margin: EdgeInsets.all(5.0),",
      "       child: ClipRRect(",
      "       borderRadius: BorderRadius.all(Radius.circular(5.0)),",
      "       child:",
      "         Image.network(url, fit: BoxFit.cover, width: 1000.0),",
      "        ),",
      "     );",
      "    },",
      "  ).toList(),",
      "),"
    ],
    "description": "Carousel With Multiple Items"
  },
  "Tile": {
    "prefix": "gf-tile",
    "body": [
      "GFListTile(",
      "  titleText:'Title',",
      "  subTitleText:'Lorem ipsum dolor sit amet, consectetur adipiscing',",
      "  icon: Icon(Icons.favorite)",
      "),"
    ],
    "description": "Tile"
  },
  "Tile With Avatar": {
    "prefix": "gf-tile-avatar",
    "body": [
      "GFListTile(",
      "  avatar:GFAvatar(),",
      "  titleText:'Title',",
      "  subTitleText:'Lorem ipsum dolor sit amet, consectetur adipiscing',",
      "  icon: Icon(Icons.favorite)",
      "),"
    ],
    "description": "Tile With Avatar"
  },
  "Tab Bar": {
    "prefix": "gf-tab-bar",
    "body": [
      "GFTabs(",
      "  length: 3,",
      "  tabs: <Widget>[",
      "    Tab(",
      "      icon: Icon(Icons.directions_bike),",
      "      child: Text(",
      "        \"Tab1\",",
      "      ),",
      "     ),",
      "     Tab(",
      "       icon: Icon(Icons.directions_bus),",
      "       child: Text(",
      "         \"Tab2\",",
      "       ),",
      "      ),",
      "      Tab(",
      "        icon: Icon(Icons.directions_railway),",
      "        child: Text(",
      "          \"Tab3\",",
      "        ),",
      "      ),",
      "   ],",
      "   tabBarView: GFTabBarView(",
      "     children: <Widget>[",
      "       Container(child: Icon(Icons.directions_bike), color: Colors.red,),",
      "       Container(child: Icon(Icons.directions_bus), color: Colors.blue,),",
      "       Container(child: Icon(Icons.directions_railway), color: Colors.orange,),",
      "     ],",
      "    ),",
      "),"
    ],
    "description": "Tab Bar"
  },
  "Floating Widget": {
    "prefix": "gf-floating",
    "body": [
      "return Scaffold(",
      "  body:GFFloatingWidget(",
      "    child: GFIconBadge(",
      "              child: GFAvatar(",
      "              size: GFSize.LARGE,",
      "              backgroundImage:AssetImage('your asset image'),",
      "              ),",
      "           counterChild:  GFBadge(",
      "           text: '12',",
      "           shape: GFBadgeShape.circle,",
      "           )",
      "        ),",
      "    body:Text('body or any kind of widget here..'),",
      "    verticalPosition: MediaQuery.of(context).size.height* 0.2,",
      "    horizontalPosition: MediaQuery.of(context).size.width* 0.8,",
      "  )",
      ")"
    ],
    "description": "Floating Widget"
  },
  "Toast": {
    "prefix": "gf-toast",
    "body": [
      "GestureDetector(",
      "    onTap: () => GFToast.showToast(",
      "        'GetFlutter is an open source library that comes with pre-build 1000+ UI components.',",
      "        context,",
      "        toastPosition: GFToastPosition.BOTTOM,",
      "        textStyle: TextStyle(fontSize: 16, color: GFColors.DARK),",
      "        backgroundColor: GFColors.LIGHT,",
      "        trailing: Icon(",
      "            Icons.notifications,",
      "            color: GFColors.SUCCESS,",
      "        )",
      "    ),",
      "    child: Container(",
      "        margin: const EdgeInsets.only(left: 15, right: 15, top: 20),",
      "            padding: const EdgeInsets.all(5),",
      "                decoration: BoxDecoration(",
      "                    borderRadius: const BorderRadius.all(Radius.circular(7)),",
      "                        color: GFColors.DARK,",
      "                        boxShadow: [",
      "                            BoxShadow(",
      "                                color: Colors.black.withOpacity(0.40), blurRadius: 5)",
      "                        ]",
      "                ),",
      "                child: GFListTile(",
      "                    color: GFColors.DARK,",
      "                    title: const Text(",
      "                            'Show Toast with trailing',",
      "                            style: TextStyle(color: GFColors.WHITE),",
      "                        ),",
      "                        icon: Icon(",
      "                            CupertinoIcons.forward,",
      "                            color: GFColors.SUCCESS,",
      "                        )",
      "                ),",
      "    )",
      "),"
    ],
    "description": "Toast"
  },
  "Toggle": {
    "prefix": "gf-toggle",
    "body": ["GFToggle(", "    onChanged: (val){},", "    value: true,", " )"],
    "description": "Toggle"
  },
  "Toggle IOS": {
    "prefix": "gf-toggle-ios",
    "body": [
      "GFToggle(",
      "  onChanged: (val){},",
      "  value: true,",
      "  type: GFToggleType.ios,",
      ")"
    ],
    "description": "Toggle IOS"
  },
  "Toggle Square": {
    "prefix": "gf-toggle-square",
    "body": [
      "GFToggle(",
      "  onChanged: (val){},",
      "  value: true,",
      "  type: GFToggleType.square,",
      ")"
    ],
    "description": "Toggle Square"
  },
  "Drawer": {
    "prefix": "gf-drawer",
    "body": [
      "GFDrawer(",
      "  child: ListView(",
      "    padding: EdgeInsets.zero,",
      "    children: <Widget>[",
      "      GFDrawerHeader(",
      "        currentAccountPicture: GFAvatar(",
      "          radius: 80.0,",
      "          backgroundImage: NetworkImage(\"https://cdn.pixabay.com/photo/2017/12/03/18/04/christmas-balls-2995437_960_720.jpg\"),",
      "        ),",
      "        otherAccountsPictures: <Widget>[",
      "          Image(",
      "            image: NetworkImage(\"https://cdn.pixabay.com/photo/2019/12/20/00/03/road-4707345_960_720.jpg\"),",
      "            fit: BoxFit.cover,",
      "          ),",
      "          GFAvatar(",
      "            child: Text(\"ab\"),",
      "          )",
      "        ],",
      "        child: Column(",
      "          mainAxisAlignment: MainAxisAlignment.start,",
      "          crossAxisAlignment: CrossAxisAlignment.start,",
      "          children: <Widget>[",
      "            Text('user name'),",
      "            Text('user@userid.com'),",
      "          ],",
      "        ),",
      "      ),",
      "      ListTile(",
      "        title: Text('Item 1'),",
      "        onTap: null,",
      "      ),",
      "      ListTile(",
      "        title: Text('Item 2'),",
      "        onTap: null,",
      "      ),",
      "    ],",
      "  ),",
      "),"
    ],
    "description": "Drawer"
  },
  "Accordion": {
    "prefix": "gf-accordion",
    "body": [
      "GFAccordion(",
      "    title: 'GF Accordion',",
      "    content: 'GetFlutter is an open source library that comes with pre-build 1000+ UI components.',",
      "    collapsedIcon: Icon(Icons.add),",
      "    expandedIcon: Icon(Icons.minimize)",
      "),"
    ],
    "description": "Accordion"
  },
  "Alert": {
    "prefix": "gf-alert",
    "body": [
      "return Scaffold(",
      "   body:GFFloatingWidget(",
      "     child:GFAlert(",
      "              title: 'Welcome !',",
      "              content: 'Get Flutter is one of the largest Flutter open-source UI library for mobile or web apps with  1000+ pre-built reusable widgets.',",
      "              type: GFAlertType.rounded,",
      "              bottombar: Row(",
      "                 mainAxisAlignment: MainAxisAlignment.end,",
      "                 children: <Widget>[",
      "                  GFButton(",
      "                      onPressed: (){",
      "                      setState(() {",
      "                        showalert=false;",
      "                    });",
      "                  },",
      "                    shape: GFButtonShape.pills,",
      "                     child: Text('Skip',style: TextStyle(color: Colors.black)),",
      "                   SizedBox(",
      "                    width:5",
      "                    ),",
      "                    GFButton(",
      "                      onPressed: (){",
      "                      setState(() {",
      "                        showalert=false;",
      "                    });",
      "                  },",
      "                    shape: GFButtonShape.pills,",
      "                    icon: Icon(Icons.keyboard_arrow_right, color: GFColors.getGFColor(GFColor.white),),",
      "                    position: GFPosition.end,",
      "                    text: 'Learn More',)",
      "                ],",
      "              ),",
      "            )",
      "   body:Text('body or any kind of widget here..')",
      " )",
      ")"
    ],
    "description": "Alert"
  },
  "AppBar": {
    "prefix": "gf-appbar",
    "body": [
      "GFAppBar(",
      "  leading:  GFIconButton(",
      "    icon: Icon(",
      "      Icons.message,",
      "      color: Colors.white,",
      "    ),",
      "    onPressed: () {},",
      "    type: GFButtonType.transparent,",
      "  ),",
      "  title: Text(\"GF Appbar\"),",
      "  actions: <Widget>[",
      "    GFIconButton(",
      "      icon: Icon(",
      "        Icons.favorite,",
      "        color: Colors.white,",
      "      ),",
      "      onPressed: () {},",
      "      type: GFButtonType.transparent,",
      "    ),",
      "  ],",
      "),"
    ],
    "description": "AppBar"
  },
  "AppBar Search": {
    "prefix": "gf-appbar-search",
    "body": [
      "GFAppBar(",
      "  leading:  GFIconButton(",
      "    icon: Icon(",
      "      Icons.message,",
      "      color: Colors.white,",
      "    ),",
      "    onPressed: () {},",
      "    type: GFButtonType.transparent,",
      "  ),",
      "  searchBar: true,",
      "  title: Text(\"GF Appbar\"),",
      "  actions: <Widget>[",
      "    GFIconButton(",
      "      icon: Icon(",
      "        Icons.favorite,",
      "        color: Colors.white,",
      "      ),",
      "      onPressed: () {},",
      "      type: GFButtonType.transparent,",
      "    ),",
      "  ],",
      "),"
    ],
    "description": "AppBar Seardh"
  },
  "AppBar Tabs": {
    "prefix": "gf-appbar-tabs",
    "body": [
      "return Scaffold(",
      "      appBar: GFAppBar(",
      "        backgroundColor: GFColors.getGFColor(GFColor.dark),",
      "        title:   GFSegmentTabs(",
      "          tabController: tabController,",
      "          tabBarColor: GFColors.getGFColor(GFColor.light),",
      "          labelColor: GFColors.getGFColor(GFColor.white),",
      "          unselectedLabelColor: GFColors.getGFColor(GFColor.dark),",
      "          indicator: BoxDecoration(",
      "            color: GFColors.getGFColor(GFColor.dark),",
      "          ),",
      "          indicatorPadding: EdgeInsets.all(8.0),",
      "          indicatorWeight: 2.0,",
      "          border: Border.all(color: Colors.white, width: 1.0),",
      "             length: 3,",
      "              tabs: <Widget>[",
      "                Text(",
      "                  \"Tab1\",",
      "                ),",
      "                Text(",
      "                  \"Tab2\",",
      "                ),",
      "                Text(",
      "                  \"Tab3\",",
      "                ),",
      "              ],",
      "            ),",
      "          ),",
      " body: GFTabBarView(controller: tabController, children: <Widget>[",
      "   Center(",
      "     child: Text('Tab 1'),",
      "   ),",
      "   Center(",
      "     child: Text('Tab 2'),",
      "   ),",
      "   Center(",
      "     child: Text('Tab 3'),",
      "   ),",
      " ]),",
      ");"
    ],
    "description": "AppBar Tabs"
  },
  "SearchBar": {
    "prefix": "gf-searchbar",
    "body": [
      "List list = [",
      "    \"Flutter\",",
      "    \"React\",",
      "    \"Ionic\",",
      "    \"Xamarin\",",
      "  ];",
      "",
      "GFSearchBar(",
      "  searchList: list,",
      "  searchQueryBuilder: (query, list) {",
      "    return list",
      "        .where((item) =>",
      "            item.toLowerCase().contains(query.toLowerCase()))",
      "        .toList();",
      "  },",
      "  overlaySearchListItemBuilder: (item) {",
      "    return Container(",
      "      padding: const EdgeInsets.all(8),",
      "      child: Text(",
      "        item,",
      "        style: const TextStyle(fontSize: 18),",
      "      ),",
      "    );",
      "  },",
      "  onItemSelected: (item) {",
      "    setState(() {",
      "      print('$item');",
      "    });",
      "  },",
      "),"
    ],
    "description": "SearchBar"
  },
  "Rating": {
    "prefix": "gf-rating",
    "body": [
      "double _rating = 3;",
      "",
      "GFRating(",
      "  value: _rating,",
      "  onChanged: (value) {",
      "    setState(() {",
      "      _rating = value;",
      "    });",
      "  },",
      "),"
    ],
    "description": "Rating"
  },
  "Rating Text": {
    "prefix": "gf-rating-text",
    "body": [
      "final _ratingController = TextEditingController();",
      "double _userRating = 4.5;",
      "",
      "@override",
      "void initState() {",
      "  super.initState();",
      "  _ratingController.text = '4.5';",
      "}",
      "",
      "GFRating(",
      "  value: _userRating,",
      "  showTextForm: true,",
      "  controller: _ratingController,",
      "  suffixIcon: GFButton(",
      "    type: GFButtonType.transparent,",
      "    onPressed: () {",
      "      setState(() {",
      "        _userRating = double.parse(_ratingController.text ?? '0.0');",
      "      });",
      "    },",
      "    child: const Text('Rate'),",
      "  ),",
      "),"
    ],
    "description": "Rating Text"
  },
  "Dropdown": {
    "prefix": "gf-dropdown",
    "body": [
      "String dropdown;",
      "",
      "Container(",
      "  height: 50,",
      "  width: MediaQuery.of(context).size.width,",
      "  margin: EdgeInsets.all(20),",
      "  child: DropdownButtonHideUnderline(",
      "    child: GFDropdown(",
      "      padding: const EdgeInsets.all(15),",
      "      borderRadius: BorderRadius.circular(5),",
      "      border: const BorderSide(",
      "          color: Colors.black12, width: 1),",
      "      dropdownButtonColor: Colors.white,",
      "      value: dropdownValue,",
      "      onChanged: (newValue) {",
      "        setState(() {",
      "          dropdownValue = newValue;",
      "        });",
      "      },",
      "      items: [",
      "        'FC Barcelona',",
      "        'Real Madrid',",
      "        'Villareal',",
      "        'Manchester City'",
      "      ]",
      "          .map((value) => DropdownMenuItem(",
      "        value: value,",
      "        child: Text(value),",
      "      ))",
      "          .toList(),",
      "    ),",
      "  ),",
      "),"
    ],
    "description": "Dropdown"
  },
  "Loader": {
    "prefix": "gf-loader",
    "body": [" GFLoader(", "   type:GFLoaderType.circle", " ),"],
    "description": "Loader"
  },
  "Line Progress Bar": {
    "prefix": "gf-progress-line",
    "body": [
      "GFProgressBar(",
      "     percentage: 0.9,",
      "     backgroundColor : Colors.black26,",
      "     progressBarColor: GFColors.DANGER",
      ")"
    ],
    "description": "Line Progress Bar"
  },
  "Circle Progress Bar": {
    "prefix": "gf-progress-circle",
    "body": [
      "GFProgressBar(",
      "     percentage: 0.9,",
      "     width:100,",
      "     radius: 90,",
      "     type: GFProgressType.circular,",
      "     backgroundColor : Colors.black26,",
      "     progressBarColor: GFColors.DANGER",
      ")"
    ],
    "description": "Circle Progress Bar"
  },
  "Shimmer": {
    "prefix": "gf-shimmer",
    "body": [
      "GFShimmer(",
      "  child: emptyBlock,",
      "),",
      "",
      "final Widget emptyBlock = Padding(",
      "      padding: const EdgeInsets.symmetric(horizontal: 16),",
      "      child: Row(",
      "        crossAxisAlignment: CrossAxisAlignment.start,",
      "        children: [",
      "          Container(",
      "            width: 54,",
      "            height: 46,",
      "            color: Colors.white,",
      "          ),",
      "          const SizedBox(width: 12),",
      "          Expanded(",
      "            child: Column(",
      "              crossAxisAlignment: CrossAxisAlignment.start,",
      "              children: <Widget>[",
      "                Container(",
      "                  width: double.infinity,",
      "                  height: 8,",
      "                  color: Colors.white,",
      "                ),",
      "                const SizedBox(height: 6),",
      "                Container(",
      "                  width: MediaQuery.of(context).size.width * 0.5,",
      "                  height: 8,",
      "                  color: Colors.white,",
      "                ),",
      "                const SizedBox(height: 6),",
      "                Container(",
      "                  width: MediaQuery.of(context).size.width * 0.25,",
      "                  height: 8,",
      "                  color: Colors.white,",
      "                ),",
      "              ],",
      "            ),",
      "          )",
      "        ],",
      "      ),",
      "    );"
    ],
    "description": "Shimmer"
  },
  "Border Solid": {
    "prefix": "gf-border-solid",
    "body": [
      "Container(",
      "  margin: EdgeInsets.symmetric(",
      "      horizontal: 15, vertical: 15),",
      "  child: GFBorder(",
      "    color: Color(0xFF19CA4B),",
      "    dashedLine: [2, 0],",
      "    type: GFBorderType.rect,",
      "    child: Image.asset(",
      "      'assets image here',",
      "      width: MediaQuery.of(context).size.width,",
      "      fit: BoxFit.fitWidth,",
      "    ),",
      "  ),",
      "),"
    ],
    "description": "Border Solid"
  },
  "Border Dashed": {
    "prefix": "gf-border-dashed",
    "body": [
      "Container(",
      "  margin: EdgeInsets.symmetric(",
      "      horizontal: 15, vertical: 15),",
      "  child: GFBorder(",
      "    dashedLine: [4, 6],",
      "    type: GFBorderType.rect,",
      "    color: Color(0xFF19CA4B),",
      "    child: Image.asset(",
      "      'assets image here',",
      "      width: MediaQuery.of(context).size.width,",
      "      fit: BoxFit.fitWidth,",
      "    ),",
      "  ),",
      "),"
    ],
    "description": "Border Dashed"
  },
  "Border Dotted": {
    "prefix": "gf-border-dotted",
    "body": [
      "Container(",
      "  margin: EdgeInsets.symmetric(",
      "      horizontal: 15, vertical: 15),",
      "  child: GFBorder(",
      "    color: Color(0xFF19CA4B),",
      "    dashedLine: [2, 1],",
      "    type: GFBorderType.rect,",
      "    child: Image.asset(",
      "      'assets image here',",
      "      width: MediaQuery.of(context).size.width,",
      "      fit: BoxFit.fitWidth,",
      "    ),",
      "  ),",
      "),"
    ],
    "description": "Border Dotted"
  },
  "Border Circle": {
    "prefix": "gf-border-circle",
    "body": [
      "Container(",
      "  width: 100,",
      "  height: 100,",
      "  child: GFBorder(",
      "    type: GFBorderType.circle,",
      "    dashedLine: [4, 6],",
      "    color: Color(0xFF19CA4B),",
      "    strokeWidth: 2,",
      "    child: Center(",
      "        child: Text(",
      "      'Circular Border',",
      "      textAlign: TextAlign.center,",
      "    )),",
      "  ),",
      "),"
    ],
    "description": "Border Circle"
  },
  "Bottomsheet": {
    "prefix": "gf-bottomsheet",
    "body": [
      "final GFBottomSheetController _controller = GFBottomSheetController();",
      "",
      "GFBottomSheet(",
      "  controller: _controller,",
      "  maxContentHeight: 300,",
      "  enableExpandableContent: true,",
      "  stickyHeaderHeight: 100,",
      "  stickyHeader: Container(",
      "    decoration: BoxDecoration(",
      "        color: Colors.white,",
      "        boxShadow: [BoxShadow(color: Colors.black45, blurRadius: 0)]),",
      "    child: const GFListTile(",
      "      avatar: GFAvatar(",
      "        backgroundImage: AssetImage('asset image here'),",
      "      ),",
      "      titleText: 'Eva Mendez',",
      "      subTitleText: '11 minutes ago',",
      "    ),",
      "  ),",
      "  contentBody: SingleChildScrollView(",
      "    child: Container(",
      "      margin: EdgeInsets.symmetric(horizontal: 15, vertical: 10),",
      "      child: Column(",
      "        children: [",
      "          Container(",
      "            margin: EdgeInsets.symmetric(horizontal: 15),",
      "            child: Row(",
      "              children: <Widget>[",
      "                Container(",
      "                  width: 30,",
      "                  height: 30,",
      "                  decoration: BoxDecoration(",
      "                      borderRadius: BorderRadius.circular(50),",
      "                      image: DecorationImage(",
      "                          image: AssetImage(",
      "                              'asset image here'))),",
      "                ),",
      "                Container(",
      "                    margin: EdgeInsets.only(left: 6),",
      "                    child: Text(",
      "                      'Add to your story',",
      "                      style: TextStyle(color: Colors.blue),",
      "                    ))",
      "              ],",
      "            ),",
      "          ),",
      "          ListView.builder(",
      "              physics: ScrollPhysics(),",
      "              shrinkWrap: true,",
      "              scrollDirection: Axis.vertical,",
      "              itemCount: 3,",
      "              itemBuilder: (BuildContext context, int index) {",
      "                return SingleChildScrollView(",
      "                    child: InkWell(",
      "                  child: GFListTile(",
      "                    avatar: GFAvatar(",
      "                      backgroundImage:",
      "                          AssetImage('asset image here'),",
      "                      size: 20,",
      "                    ),",
      "                    subtitleText: 'John Mendez',",
      "                    icon: Container(",
      "                      width: 66,",
      "                      height: 30,",
      "                      child: GFButton(",
      "                        onPressed: () {},",
      "                        color: GFColors.PRIMARY,",
      "                        child: Center(",
      "                            child: Text(",
      "                          'Send',",
      "                          style: TextStyle(color: Colors.white),",
      "                        )),",
      "                      ),",
      "                    ),",
      "                  ),",
      "                ));",
      "              }),",
      "        ],",
      "      ),",
      "    ),",
      "  ),",
      "),"
    ],
    "description": "Bottomsheet"
  },
  "Checkbox Basic": {
    "prefix": "gf-checkbox-basic",
    "body": [
      "bool isChecked = false;",
      "",
      "GFCard(",
      " content: Row(",
      " mainAxisAlignment: MainAxisAlignment.spaceBetween,",
      " children: <Widget>[",
      "   GFCheckbox(",
      "     size: GFSize.SMALL,",
      "     activeBgColor: GFColors.DANGER,",
      "     onChanged: (value) {",
      "       setState(() {",
      "         isChecked = value;",
      "       });",
      "     },",
      "     value: isChecked,",
      "     inactiveIcon: null,",
      "   ),",
      "  GFCheckbox(",
      "    activeBgColor: GFColors.SECONDARY,",
      "    onChanged: (value) {",
      "      setState(() {",
      "        isChecked = value;",
      "      });",
      "    },",
      "    value: isChecked,",
      "    inactiveIcon: null,",
      "   ),",
      "   GFCheckbox(",
      "     size: GFSize.LARGE,",
      "     activeBgColor: GFColors.SUCCESS,",
      "     onChanged: (value) {",
      "       setState(() {",
      "         isChecked = value;",
      "       });",
      "     },",
      "     value: isChecked,",
      "     inactiveIcon: null,",
      "    ),",
      "   ],",
      "  ),",
      "),"
    ],
    "description": "Checkbox Basic"
  },
  "Checkbox Square": {
    "prefix": "gf-checkbox-square",
    "body": [
      "bool isChecked = false;",
      "",
      "GFCard(",
      "  content: Row(",
      "    mainAxisAlignment: MainAxisAlignment.spaceBetween,",
      "    children: <Widget>[",
      "      GFCheckbox(",
      "        size: GFSize.SMALL,",
      "        activeBgColor: GFColors.DANGER,",
      "        type: GFCheckboxType.square,",
      "        onChanged: (value) {",
      "          setState(() {",
      "            isChecked = value;",
      "          });",
      "        },",
      "        value: isChecked,",
      "        inactiveIcon: null,",
      "      ),",
      "      GFCheckbox(",
      "        type: GFCheckboxType.square,",
      "        activeBgColor: GFColors.SECONDARY,",
      "        onChanged: (value) {",
      "          setState(() {",
      "            isChecked = value;",
      "          });",
      "        },",
      "        value: isChecked,",
      "        inactiveIcon: null,",
      "      ),",
      "      GFCheckbox(",
      "        size: GFSize.LARGE,",
      "        activeBgColor: GFColors.SUCCESS,",
      "        type: GFCheckboxType.square,",
      "        onChanged: (value) {",
      "          setState(() {",
      "            isChecked = value;",
      "          });",
      "        },",
      "        value: isChecked,",
      "        inactiveIcon: null,",
      "      ),",
      "    ],",
      "  ),",
      "),"
    ],
    "description": "Checkbox Square"
  },
  "Checkbox Circle": {
    "prefix": "gf-checkbox-circle",
    "body": [
      "bool isChecked = false;",
      "",
      "GFCard(",
      "  content: Row(",
      "    mainAxisAlignment: MainAxisAlignment.spaceBetween,",
      "    children: <Widget>[",
      "      GFCheckbox(",
      "        size: GFSize.SMALL,",
      "        activeBgColor: GFColors.DANGER,",
      "        type: GFCheckboxType.circle,",
      "        onChanged: (value) {",
      "          setState(() {",
      "            isChecked = value;",
      "          });",
      "        },",
      "        value: isChecked,",
      "        inactiveIcon: null,",
      "      ),",
      "      GFCheckbox(",
      "        type: GFCheckboxType.circle,",
      "        activeBgColor: GFColors.SECONDARY,",
      "        onChanged: (value) {",
      "          setState(() {",
      "            isChecked = value;",
      "          });",
      "        },",
      "        value: isChecked,",
      "      ),",
      "      GFCheckbox(",
      "        activeBgColor: GFColors.SUCCESS,",
      "        size: GFSize.LARGE,",
      "        type: GFCheckboxType.circle,",
      "        onChanged: (value) {",
      "          setState(() {",
      "            isChecked = value;",
      "          });",
      "        },",
      "        value: isChecked,",
      "        inactiveIcon: null,",
      "      ),",
      "    ],",
      "  ),",
      "),"
    ],
    "description": "Checkbox Crcle"
  },
  "Checkbox List Tile": {
    "prefix": "gf-tile-checkbox",
    "body": [
      "bool isChecked = false;",
      "",
      "GFCheckboxListTile(",
      "  titleText: 'Arthur Shelby',",
      "  subTitleText: 'By order of the peaky blinders',",
      "  avatar: GFAvatar(",
      "    backgroundImage: AssetImage('Assets image here'),",
      "  ),",
      "  size: 25,",
      "  activeBgColor: Colors.green,",
      "  type: GFCheckboxType.circle,",
      "  activeIcon: Icon(",
      "    Icons.check,",
      "    size: 15,",
      "    color: Colors.white,",
      "  ),",
      "  onChanged: (value) {",
      "    setState(() {",
      "      isChecked = value;",
      "    });",
      "  },",
      "  value: isChecked,",
      "  inactiveIcon: null,",
      "),"
    ],
    "description": "Checkbox List Tile"
  },
  "Checkbox Multiselect Dropdown": {
    "prefix": "gf-checkbox-multi",
    "body": [
      "GFMultiSelect(",
      "  items: dropList,",
      "  onSelect: (value) {",
      "    print('selected $value ');",
      "  },",
      "  dropdownTitleTileText: 'Messi, Griezmann, Coutinho ',",
      "  dropdownTitleTileMargin: EdgeInsets.only(",
      "      top: 22, left: 18, right: 18, bottom: 5),",
      "  dropdownTitleTilePadding: EdgeInsets.all(10),",
      "  dropdownUnderlineBorder:",
      "  const BorderSide(color: Colors.transparent, width: 2),",
      "  dropdownTitleTileBorder:",
      "  Border.all(color: Colors.grey[200], width: 1),",
      "  dropdownTitleTileBorderRadius: BorderRadius.circular(5),",
      "  expandedIcon: const Icon(",
      "    Icons.keyboard_arrow_down,",
      "    color: Colors.black54,",
      "  ),",
      "  collapsedIcon: const Icon(",
      "    Icons.keyboard_arrow_up,",
      "    color: Colors.black54,",
      "  ),",
      "  submitButton: Text('OK'),",
      "  cancelButton: Text('Cancel'),",
      "  dropdownTitleTileTextStyle:",
      "  const TextStyle(fontSize: 14, color: Colors.black54),",
      "  padding: const EdgeInsets.all(6),",
      "  margin: const EdgeInsets.all(6),",
      "  type: GFCheckboxType.basic,",
      "  activeBgColor: GFColors.SUCCESS,",
      "  activeBorderColor: GFColors.SUCCESS,",
      "  inactiveBorderColor: Colors.grey[200],",
      "),"
    ],
    "description": "Checkbox Multiselect Dropdown"
  },
  "Intro": {
    "prefix": "gf-intro",
    "body": [
      "late PageController _pageController;",
      "List<Widget> slideList;",
      "int initialPage;",
      "",
      "@override",
      "void initState() {",
      "  _pageController = PageController(initialPage: 2);",
      "  initialPage = _pageController.initialPage;",
      "  super.initState();",
      "}",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "  return SafeArea(",
      "    child: GFIntroScreen(",
      "      color: Colors.blueGrey,",
      "      slides: slides(),",
      "      pageController: _pageController,",
      "      currentIndex: inittialIndex,",
      "      pageCount: 5,",
      "      introScreenBottomNavigationBar: GFIntroScreenBottomNavigationBar(",
      "        pageController: _pageController,",
      "        pageCount: slideList.length,",
      "        currentIndex: initialPage,",
      "        onForwardButtonTap: () {",
      "          _pageController.nextPage(",
      "              duration: const Duration(milliseconds: 500),",
      "              curve: Curves.linear);",
      "        },",
      "        onBackButtonTap: () {",
      "          _pageController.previousPage(",
      "              duration: const Duration(milliseconds: 500),",
      "              curve: Curves.linear);",
      "        },",
      "        navigationBarColor: Colors.white,",
      "        showDivider: false,",
      "        inActiveColor: Colors.grey[200],",
      "        activeColor: GFColors.SUCCESS,",
      "      ),",
      "    ),",
      "  );",
      "}",
      "",
      "List<Widget> slides() {",
      "  slideList = [",
      "    Container(",
      "      child: GFImageOverlay(",
      "        width: MediaQuery.of(context).size.width,",
      "        padding: EdgeInsets.all(16),",
      "        child: Row(",
      "          crossAxisAlignment: CrossAxisAlignment.start,",
      "          children: <Widget>[",
      "            Padding(",
      "              padding: const EdgeInsets.only(top: 70.0, left: 20),",
      "              child: Text(",
      "                'Welcome!',",
      "                style: TextStyle(",
      "                    color: Colors.white,",
      "                    decoration: TextDecoration.none,",
      "                    fontSize: 25),",
      "              ),",
      "            ),",
      "          ],",
      "        ),",
      "        color: Colors.orange,",
      "        image: const AssetImage('assets image here'),",
      "        boxFit: BoxFit.cover,",
      "        colorFilter:",
      "            ColorFilter.mode(Colors.black.withOpacity(0.2), BlendMode.darken),",
      "        borderRadius: BorderRadius.circular(5),",
      "      ),",
      "    ),",
      "    Container(",
      "      width: MediaQuery.of(context).size.width,",
      "      height: MediaQuery.of(context).size.height,",
      "      decoration: BoxDecoration(",
      "          borderRadius: BorderRadius.circular(0),",
      "          image: DecorationImage(",
      "            image: AssetImage('assets image here'),",
      "            fit: BoxFit.cover,",
      "            colorFilter: ColorFilter.mode(",
      "                Colors.black.withOpacity(0.2), BlendMode.darken),",
      "          )),",
      "    ),",
      "    Container(",
      "      width: MediaQuery.of(context).size.width,",
      "      height: MediaQuery.of(context).size.height,",
      "      decoration: BoxDecoration(",
      "          borderRadius: BorderRadius.circular(0),",
      "          image: DecorationImage(",
      "            image: AssetImage('assets image here'),",
      "            fit: BoxFit.cover,",
      "            colorFilter: ColorFilter.mode(",
      "                Colors.black.withOpacity(0.2), BlendMode.darken),",
      "          )),",
      "    ),",
      "    Container(",
      "      width: MediaQuery.of(context).size.width,",
      "      height: MediaQuery.of(context).size.height,",
      "      decoration: BoxDecoration(",
      "          borderRadius: BorderRadius.circular(0),",
      "          image: DecorationImage(",
      "            image: AssetImage('assets image here'),",
      "            fit: BoxFit.cover,",
      "            colorFilter: ColorFilter.mode(",
      "                Colors.black.withOpacity(0.2), BlendMode.darken),",
      "          )),",
      "    ),",
      "  ];",
      "  return slideList;",
      "}"
    ],
    "description": "Intro"
  },
  "Radio Circle": {
    "prefix": "gf-radio-circle",
    "body": [
      "int groupValue = 0;",
      "",
      "GFCard(",
      "    content: Row(",
      "      mainAxisAlignment: MainAxisAlignment.spaceBetween,",
      "      children: <Widget>[",
      "        GFRadio(",
      "          size: GFSize.LARGE,",
      "          activeBorderColor: GFColors.SUCCESS,",
      "          value: 0,",
      "          groupValue: groupValue,",
      "          onChanged: (val) {",
      "            setState(() {",
      "              groupValue = value;",
      "            });",
      "          },",
      "          inactiveIcon: null,",
      "          radioColor: GFColors.SUCCESS,",
      "        ),",
      "        GFRadio(",
      "          size: GFSize.MEDIUM,",
      "          value: 1,",
      "          groupValue: groupValue,",
      "          onChanged: (value) {",
      "            setState(() {",
      "              groupValue = value;",
      "            });",
      "          },",
      "          inactiveIcon: null,",
      "          activeBorderColor: GFColors.SUCCESS,",
      "          radioColor: GFColors.SUCCESS,",
      "        ),",
      "        GFRadio(",
      "          size: GFSize.SMALL,",
      "          value: 2,",
      "          groupValue: groupValue,",
      "          onChanged: (value) {",
      "            setState(() {",
      "              groupValue = value;",
      "            });",
      "          },",
      "          inactiveIcon: null,",
      "          activeBorderColor: GFColors.SUCCESS,",
      "          radioColor: GFColors.SUCCESS,",
      "        ),",
      "        GFRadio(",
      "          size: 20,",
      "          value: 3,",
      "          groupValue: groupValue,",
      "          onChanged: (value) {",
      "            setState(() {",
      "              groupValue = value;",
      "            });",
      "          },",
      "          inactiveIcon: null,",
      "          activeBorderColor: GFColors.SUCCESS,",
      "          radioColor: GFColors.SUCCESS,",
      "        )",
      "      ],",
      "    )),"
    ],
    "description": "Radio Circle"
  },
  "Radio Square": {
    "prefix": "gf-radio-square",
    "body": [
      "int groupValue = 0;",
      "",
      "GFCard(",
      "    content: Row(",
      "      mainAxisAlignment: MainAxisAlignment.spaceBetween,",
      "      children: <Widget>[",
      "        GFRadio(",
      "          type: GFRadioType.square,",
      "          size: GFSize.LARGE,",
      "          value: 4,",
      "          groupValue: groupValue,",
      "          onChanged: (value) {",
      "            setState(() {",
      "              groupValue = value;",
      "            });",
      "          },",
      "          inactiveIcon: null,",
      "          activeBorderColor: GFColors.SUCCESS,",
      "          radioColor: GFColors.SUCCESS,",
      "        ),",
      "        GFRadio(",
      "          type: GFRadioType.square,",
      "          size: GFSize.MEDIUM,",
      "          value: 5,",
      "          groupValue: groupValue,",
      "          onChanged: (value) {",
      "            setState(() {",
      "              groupValue = value;",
      "            });",
      "          },",
      "          inactiveIcon: null,",
      "          activeBorderColor: GFColors.SUCCESS,",
      "          radioColor: GFColors.SUCCESS,",
      "        ),",
      "        GFRadio(",
      "          type: GFRadioType.square,",
      "          size: GFSize.SMALL,",
      "          value: 6,",
      "          groupValue: groupValue,",
      "          onChanged: (value) {",
      "            setState(() {",
      "              groupValue = value;",
      "            });",
      "          },",
      "          inactiveIcon: null,",
      "          activeBorderColor: GFColors.SUCCESS,",
      "          radioColor: GFColors.SUCCESS,",
      "        ),",
      "        GFRadio(",
      "          type: GFRadioType.square,",
      "          size: 20,",
      "          value: 7,",
      "          groupValue: groupValue,",
      "          onChanged: (value) {",
      "            setState(() {",
      "              groupValue = value;",
      "            });",
      "          },",
      "          inactiveIcon: null,",
      "          activeBorderColor: GFColors.SUCCESS,",
      "          radioColor: GFColors.SUCCESS,",
      "          activeIcon: Icon(Icons.close),",
      "        )",
      "      ],",
      "    )),"
    ],
    "description": "Radio Square"
  },
  "Radio List Tile": {
    "prefix": "gf-tile-radio",
    "body": [
      "int groupValue = 0;",
      "",
      "GFRadioListTile(",
      "  titleText: 'Arthur Shelby',",
      "  subTitleText: 'By order of the peaky blinders',",
      "  avatar: GFAvatar(",
      "    backgroundImage: AssetImage('Assets image here'),",
      "  ),",
      "  size: 25,",
      "  activeBorderColor: Colors.green,",
      "  focusColor: Colors.green,",
      "  type: GFRadioType.square,",
      "  value: 0,",
      "  groupValue: groupValue,",
      "  onChanged: (value) {",
      "    setState(() {",
      "      groupValue = value;",
      "    });",
      "  },",
      "  inactiveIcon: null,",
      "),",
      "GFRadioListTile(",
      "  titleText: 'Arthur Shelby',",
      "  subtitleText: 'By order of the peaky blinders',",
      "  avatar: GFAvatar(",
      "    backgroundImage: AssetImage('Assets image here'),",
      "  ),",
      "  size: 25,",
      "  activeBorderColor: Colors.green,",
      "  focusColor: Colors.green,",
      "  type: GFRadioType.square,",
      "  value: 1,",
      "  groupValue: groupValue,",
      "  onChanged: (value) {",
      "    setState(() {",
      "      groupValue = value;",
      "    });",
      "  },",
      "  inactiveIcon: null,",
      "),"
    ],
    "description": "Radio List Tile"
  }
}
